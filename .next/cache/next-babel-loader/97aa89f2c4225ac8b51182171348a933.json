{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/home/aekryzprobook/Desktop/next.js/administrator/lib/db.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport * as Firebase from \"firebase/app\";\nimport Router from \"next/router\";\nimport cookie from 'js-cookie';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/functions';\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\nexport const firebase = Firebase.apps.length ? Firebase.app() : Firebase.initializeApp(firebaseConfig);\nconst firestore = Firebase.firestore();\nconst auth = Firebase.auth();\nconst functions = Firebase.functions();\nconst database = firebase.database();\nconst authContext = createContext();\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n\n  const signin = async (email, password) => {\n    const loginAsAdmin = functions.httpsCallable('loginAsAdmin');\n    const snapshot = await loginAsAdmin({\n      email: email\n    });\n    return new _Promise(async (resolve, reject) => {\n      if (snapshot.data) {\n        try {\n          const response = await firebase.auth().signInWithEmailAndPassword(email, password);\n          setUser(response.user);\n          cookie.set('token', response.user.refreshToken);\n          resolve('successful login');\n        } catch (error) {\n          reject('failed login');\n        }\n      } else {\n        reject('failed login');\n      }\n    }); // loginAsAdmin({ email: email }).then(snapshot => {\n    //   if (snapshot.data.admin) {\n    //     return firebase\n    //       .auth()\n    //       .signInWithEmailAndPassword(email, password)\n    //       .then(response => {\n    //         setUser(response.user);\n    //         Router.push('/dashboard/profile')\n    //         cookie.set('token', response.user.refreshToken)\n    //       })\n    //       // .then(() => Router.push('/dashboard/profile'))\n    //       // .then(() => console.log('rrrrrrrr'))\n    //       // Router.push('/dashboard/profile')\n    //       .catch((error) => error.message)\n    //   } else {\n    //     return 'Somthing went wrong'\n    //   }\n    // })\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => cookie.remove('token')).then(() => Router.push('/')).then(() => {\n      setUser(false);\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    firestore,\n    user,\n    signin,\n    // signup,\n    signout\n  };\n} // useProvideAuth.getInitialProps = async ({ req, res }) => {\n//   res.user = {}\n//   const userAgent = req ? console.log('auth.currentUser') : 'console.log(auth.currentUser)'\n//   return { userAgent }\n// }","map":{"version":3,"sources":["/home/aekryzprobook/Desktop/next.js/administrator/lib/db.js"],"names":["React","useState","useEffect","useContext","createContext","Firebase","Router","cookie","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","databaseURL","FIREBASE_DATABASE_URL","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID","firebase","apps","length","app","initializeApp","firestore","auth","functions","database","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","signin","email","password","loginAsAdmin","httpsCallable","snapshot","resolve","reject","data","response","signInWithEmailAndPassword","set","refreshToken","error","signout","signOut","then","remove","push","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport * as Firebase from \"firebase/app\";\nimport Router from \"next/router\";\nimport cookie from 'js-cookie'\nimport 'firebase/firestore'\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/functions';\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n}\n\nexport const firebase = Firebase.apps.length\n  ? Firebase.app()\n  : Firebase.initializeApp(firebaseConfig)\n\nconst firestore = Firebase.firestore()\nconst auth = Firebase.auth()\nconst functions = Firebase.functions()\nconst database = firebase.database();\nconst authContext = createContext();\n\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const signin = async (email, password) => {\n\n    const loginAsAdmin = functions.httpsCallable('loginAsAdmin');\n\n    const snapshot = await loginAsAdmin({ email: email })\n\n    return new Promise(async (resolve, reject) => {\n      if (snapshot.data) {\n        try {\n          const response = await firebase.auth().signInWithEmailAndPassword(email, password)\n          setUser(response.user)\n          cookie.set('token', response.user.refreshToken)\n          resolve('successful login')\n        } catch (error) {\n          reject('failed login')\n        }\n      } else {\n        reject('failed login')\n      }\n    })\n    // loginAsAdmin({ email: email }).then(snapshot => {\n    //   if (snapshot.data.admin) {\n    //     return firebase\n    //       .auth()\n    //       .signInWithEmailAndPassword(email, password)\n    //       .then(response => {\n    //         setUser(response.user);\n    //         Router.push('/dashboard/profile')\n    //         cookie.set('token', response.user.refreshToken)\n    //       })\n    //       // .then(() => Router.push('/dashboard/profile'))\n    //       // .then(() => console.log('rrrrrrrr'))\n    //       // Router.push('/dashboard/profile')\n    //       .catch((error) => error.message)\n    //   } else {\n    //     return 'Somthing went wrong'\n    //   }\n    // })\n  };\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => cookie.remove('token'))\n      .then(() => Router.push('/'))\n      .then(() => {\n        setUser(false);\n      });\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    firestore,\n    user,\n    signin,\n    // signup,\n    signout,\n  };\n}\n\n// useProvideAuth.getInitialProps = async ({ req, res }) => {\n//   res.user = {}\n//   const userAgent = req ? console.log('auth.currentUser') : 'console.log(auth.currentUser)'\n//   return { userAgent }\n// }\n"]},"metadata":{},"sourceType":"module"}